{
	"info": {
		"_postman_id": "test-suite-12345",
		"name": "Ableton Cookbook API - Test Suite",
		"description": "Comprehensive test suite for the Ableton Cookbook API. Run this collection to validate all endpoints and functionality.\n\n## What this tests:\n- Authentication flows\n- CRUD operations for racks\n- User social features\n- Error handling\n- Rate limiting\n- Data validation\n\n## Prerequisites:\n- Development server running\n- Test user account created\n- Sample .adg file available",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Setup Tests",
			"item": [
				{
					"name": "Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('API is healthy', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response contains status', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData.status).to.equal('ok');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/health",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"health"
							]
						}
					}
				}
			]
		},
		{
			"name": "Authentication Tests",
			"item": [
				{
					"name": "Invalid Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Invalid login returns 422', function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test('Error message present', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"invalid@email.com\",\n    \"password\": \"wrongpassword\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"login"
							]
						}
					}
				}
			]
		},
		{
			"name": "Rack API Tests",
			"item": [
				{
					"name": "Get Racks - No Auth Required",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Get racks without auth succeeds', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has pagination structure', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData).to.have.property('links');",
									"    pm.expect(jsonData).to.have.property('meta');",
									"});",
									"",
									"pm.test('Racks have required fields', function () {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.data.length > 0) {",
									"        const rack = jsonData.data[0];",
									"        pm.expect(rack).to.have.property('id');",
									"        pm.expect(rack).to.have.property('title');",
									"        pm.expect(rack).to.have.property('rack_type');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/racks?per_page=5",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"racks"
							],
							"query": [
								{
									"key": "per_page",
									"value": "5"
								}
							]
						}
					}
				},
				{
					"name": "Get Racks - Filter by Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Filter by rack type works', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('All returned racks have correct type', function () {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.data.length > 0) {",
									"        jsonData.data.forEach(rack => {",
									"            pm.expect(rack.rack_type).to.equal('instrument');",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/racks?filter[rack_type]=instrument&per_page=3",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"racks"
							],
							"query": [
								{
									"key": "filter[rack_type]",
									"value": "instrument"
								},
								{
									"key": "per_page",
									"value": "3"
								}
							]
						}
					}
				},
				{
					"name": "Create Rack - Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Unauthorized request returns 401', function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "title",
									"value": "Test Rack",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/v1/racks",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"racks"
							]
						}
					}
				}
			]
		},
		{
			"name": "User API Tests",
			"item": [
				{
					"name": "Get User - Valid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Get user succeeds', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('User has required fields', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('name');",
									"    pm.expect(jsonData.data).to.have.property('email');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/users/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{user_id}}"
							]
						}
					}
				},
				{
					"name": "Get User - Invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Invalid user ID returns 404', function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/users/999999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"999999"
							]
						}
					}
				},
				{
					"name": "Follow User - Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Follow without auth returns 401', function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/users/{{user_id}}/follow",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{user_id}}",
								"follow"
							]
						}
					}
				}
			]
		},
		{
			"name": "Error Handling Tests",
			"item": [
				{
					"name": "Invalid Endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Invalid endpoint returns 404', function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/nonexistent",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"nonexistent"
							]
						}
					}
				},
				{
					"name": "Malformed JSON",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Malformed JSON handled gracefully', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 422]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ invalid json }"
						},
						"url": {
							"raw": "{{base_url}}/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"login"
							]
						}
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Set test environment defaults",
					"if (!pm.environment.get('base_url')) {",
					"    pm.environment.set('base_url', 'http://127.0.0.1:8080');",
					"}",
					"",
					"if (!pm.environment.get('user_id')) {",
					"    pm.environment.set('user_id', '1');",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global tests for all requests",
					"pm.test('Response time is acceptable', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(3000);",
					"});",
					"",
					"pm.test('No server errors', function () {",
					"    pm.expect(pm.response.code).to.be.below(500);",
					"});",
					"",
					"// Check for proper JSON responses where expected",
					"if (pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('json')) {",
					"    pm.test('Valid JSON response', function () {",
					"        pm.response.to.be.json;",
					"    });",
					"}"
				]
			}
		}
	]
}